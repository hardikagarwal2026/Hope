// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/v1/location.proto

package location

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocationService_UpsertLocation_FullMethodName    = "/proto.v1.LocationService/UpsertLocation"
	LocationService_GetLocationByUser_FullMethodName = "/proto.v1.LocationService/GetLocationByUser"
	LocationService_ListNearby_FullMethodName        = "/proto.v1.LocationService/ListNearby"
	LocationService_DeleteMyLocation_FullMethodName  = "/proto.v1.LocationService/DeleteMyLocation"
)

// LocationServiceClient is the client API for LocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationServiceClient interface {
	UpsertLocation(ctx context.Context, in *UpsertLocationRequest, opts ...grpc.CallOption) (*UpsertLocationResponse, error)
	GetLocationByUser(ctx context.Context, in *GetLocationByUserRequest, opts ...grpc.CallOption) (*GetLocationByUserResponse, error)
	ListNearby(ctx context.Context, in *ListNearbyRequest, opts ...grpc.CallOption) (*ListNearbyResponse, error)
	DeleteMyLocation(ctx context.Context, in *DeleteMyLocationRequest, opts ...grpc.CallOption) (*DeleteMyLocationResponse, error)
}

type locationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationServiceClient(cc grpc.ClientConnInterface) LocationServiceClient {
	return &locationServiceClient{cc}
}

func (c *locationServiceClient) UpsertLocation(ctx context.Context, in *UpsertLocationRequest, opts ...grpc.CallOption) (*UpsertLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertLocationResponse)
	err := c.cc.Invoke(ctx, LocationService_UpsertLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetLocationByUser(ctx context.Context, in *GetLocationByUserRequest, opts ...grpc.CallOption) (*GetLocationByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocationByUserResponse)
	err := c.cc.Invoke(ctx, LocationService_GetLocationByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ListNearby(ctx context.Context, in *ListNearbyRequest, opts ...grpc.CallOption) (*ListNearbyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNearbyResponse)
	err := c.cc.Invoke(ctx, LocationService_ListNearby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) DeleteMyLocation(ctx context.Context, in *DeleteMyLocationRequest, opts ...grpc.CallOption) (*DeleteMyLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMyLocationResponse)
	err := c.cc.Invoke(ctx, LocationService_DeleteMyLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationServiceServer is the server API for LocationService service.
// All implementations must embed UnimplementedLocationServiceServer
// for forward compatibility.
type LocationServiceServer interface {
	UpsertLocation(context.Context, *UpsertLocationRequest) (*UpsertLocationResponse, error)
	GetLocationByUser(context.Context, *GetLocationByUserRequest) (*GetLocationByUserResponse, error)
	ListNearby(context.Context, *ListNearbyRequest) (*ListNearbyResponse, error)
	DeleteMyLocation(context.Context, *DeleteMyLocationRequest) (*DeleteMyLocationResponse, error)
	mustEmbedUnimplementedLocationServiceServer()
}

// UnimplementedLocationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocationServiceServer struct{}

func (UnimplementedLocationServiceServer) UpsertLocation(context.Context, *UpsertLocationRequest) (*UpsertLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLocation not implemented")
}
func (UnimplementedLocationServiceServer) GetLocationByUser(context.Context, *GetLocationByUserRequest) (*GetLocationByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationByUser not implemented")
}
func (UnimplementedLocationServiceServer) ListNearby(context.Context, *ListNearbyRequest) (*ListNearbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNearby not implemented")
}
func (UnimplementedLocationServiceServer) DeleteMyLocation(context.Context, *DeleteMyLocationRequest) (*DeleteMyLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMyLocation not implemented")
}
func (UnimplementedLocationServiceServer) mustEmbedUnimplementedLocationServiceServer() {}
func (UnimplementedLocationServiceServer) testEmbeddedByValue()                         {}

// UnsafeLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationServiceServer will
// result in compilation errors.
type UnsafeLocationServiceServer interface {
	mustEmbedUnimplementedLocationServiceServer()
}

func RegisterLocationServiceServer(s grpc.ServiceRegistrar, srv LocationServiceServer) {
	// If the following call pancis, it indicates UnimplementedLocationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocationService_ServiceDesc, srv)
}

func _LocationService_UpsertLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).UpsertLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_UpsertLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).UpsertLocation(ctx, req.(*UpsertLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetLocationByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetLocationByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_GetLocationByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetLocationByUser(ctx, req.(*GetLocationByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ListNearby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNearbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ListNearby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_ListNearby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ListNearby(ctx, req.(*ListNearbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_DeleteMyLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMyLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).DeleteMyLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_DeleteMyLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).DeleteMyLocation(ctx, req.(*DeleteMyLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationService_ServiceDesc is the grpc.ServiceDesc for LocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.LocationService",
	HandlerType: (*LocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertLocation",
			Handler:    _LocationService_UpsertLocation_Handler,
		},
		{
			MethodName: "GetLocationByUser",
			Handler:    _LocationService_GetLocationByUser_Handler,
		},
		{
			MethodName: "ListNearby",
			Handler:    _LocationService_ListNearby_Handler,
		},
		{
			MethodName: "DeleteMyLocation",
			Handler:    _LocationService_DeleteMyLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/location.proto",
}
