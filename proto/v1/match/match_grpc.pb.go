// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/v1/match.proto

package match

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MatchService_RequestToJoin_FullMethodName      = "/proto.v1.MatchService/RequestToJoin"
	MatchService_AcceptRequest_FullMethodName      = "/proto.v1.MatchService/AcceptRequest"
	MatchService_RejectRequest_FullMethodName      = "/proto.v1.MatchService/RejectRequest"
	MatchService_CompleteMatch_FullMethodName      = "/proto.v1.MatchService/CompleteMatch"
	MatchService_GetMatch_FullMethodName           = "/proto.v1.MatchService/GetMatch"
	MatchService_ListMatchesByRide_FullMethodName  = "/proto.v1.MatchService/ListMatchesByRide"
	MatchService_ListMatchesByRider_FullMethodName = "/proto.v1.MatchService/ListMatchesByRider"
)

// MatchServiceClient is the client API for MatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchServiceClient interface {
	// Rider jab driver ki ride join karna chahta hai to ye request banega
	RequestToJoin(ctx context.Context, in *RequestToJoinRequest, opts ...grpc.CallOption) (*RequestToJoinResponse, error)
	// Driver pending request ko accept karega to ye call hoga
	AcceptRequest(ctx context.Context, in *AcceptRequestRequest, opts ...grpc.CallOption) (*AcceptRequestResponse, error)
	// Driver pending request ko reject karega to ye wala RPC chalega
	RejectRequest(ctx context.Context, in *RejectRequestRequest, opts ...grpc.CallOption) (*RejectRequestResponse, error)
	// Ride complete hone ke baad match ko completed status dene ke liye
	CompleteMatch(ctx context.Context, in *CompleteMatchRequest, opts ...grpc.CallOption) (*CompleteMatchResponse, error)
	// Koi bhi match ka detail lane ke liye, bas match ka ID pass karo
	GetMatch(ctx context.Context, in *GetMatchRequest, opts ...grpc.CallOption) (*GetMatchResponse, error)
	// Ek particular ride (RideOffer) ke liye saare matches ka list
	ListMatchesByRide(ctx context.Context, in *ListMatchesByRideRequest, opts ...grpc.CallOption) (*ListMatchesByRideResponse, error)
	// Rider ne jo matches initiate kiye hain unka pura list
	ListMatchesByRider(ctx context.Context, in *ListMatchesByRiderRequest, opts ...grpc.CallOption) (*ListMatchesByRiderResponse, error)
}

type matchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchServiceClient(cc grpc.ClientConnInterface) MatchServiceClient {
	return &matchServiceClient{cc}
}

func (c *matchServiceClient) RequestToJoin(ctx context.Context, in *RequestToJoinRequest, opts ...grpc.CallOption) (*RequestToJoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestToJoinResponse)
	err := c.cc.Invoke(ctx, MatchService_RequestToJoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) AcceptRequest(ctx context.Context, in *AcceptRequestRequest, opts ...grpc.CallOption) (*AcceptRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptRequestResponse)
	err := c.cc.Invoke(ctx, MatchService_AcceptRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) RejectRequest(ctx context.Context, in *RejectRequestRequest, opts ...grpc.CallOption) (*RejectRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectRequestResponse)
	err := c.cc.Invoke(ctx, MatchService_RejectRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) CompleteMatch(ctx context.Context, in *CompleteMatchRequest, opts ...grpc.CallOption) (*CompleteMatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteMatchResponse)
	err := c.cc.Invoke(ctx, MatchService_CompleteMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) GetMatch(ctx context.Context, in *GetMatchRequest, opts ...grpc.CallOption) (*GetMatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchResponse)
	err := c.cc.Invoke(ctx, MatchService_GetMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) ListMatchesByRide(ctx context.Context, in *ListMatchesByRideRequest, opts ...grpc.CallOption) (*ListMatchesByRideResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMatchesByRideResponse)
	err := c.cc.Invoke(ctx, MatchService_ListMatchesByRide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) ListMatchesByRider(ctx context.Context, in *ListMatchesByRiderRequest, opts ...grpc.CallOption) (*ListMatchesByRiderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMatchesByRiderResponse)
	err := c.cc.Invoke(ctx, MatchService_ListMatchesByRider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchServiceServer is the server API for MatchService service.
// All implementations must embed UnimplementedMatchServiceServer
// for forward compatibility.
type MatchServiceServer interface {
	// Rider jab driver ki ride join karna chahta hai to ye request banega
	RequestToJoin(context.Context, *RequestToJoinRequest) (*RequestToJoinResponse, error)
	// Driver pending request ko accept karega to ye call hoga
	AcceptRequest(context.Context, *AcceptRequestRequest) (*AcceptRequestResponse, error)
	// Driver pending request ko reject karega to ye wala RPC chalega
	RejectRequest(context.Context, *RejectRequestRequest) (*RejectRequestResponse, error)
	// Ride complete hone ke baad match ko completed status dene ke liye
	CompleteMatch(context.Context, *CompleteMatchRequest) (*CompleteMatchResponse, error)
	// Koi bhi match ka detail lane ke liye, bas match ka ID pass karo
	GetMatch(context.Context, *GetMatchRequest) (*GetMatchResponse, error)
	// Ek particular ride (RideOffer) ke liye saare matches ka list
	ListMatchesByRide(context.Context, *ListMatchesByRideRequest) (*ListMatchesByRideResponse, error)
	// Rider ne jo matches initiate kiye hain unka pura list
	ListMatchesByRider(context.Context, *ListMatchesByRiderRequest) (*ListMatchesByRiderResponse, error)
	mustEmbedUnimplementedMatchServiceServer()
}

// UnimplementedMatchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchServiceServer struct{}

func (UnimplementedMatchServiceServer) RequestToJoin(context.Context, *RequestToJoinRequest) (*RequestToJoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestToJoin not implemented")
}
func (UnimplementedMatchServiceServer) AcceptRequest(context.Context, *AcceptRequestRequest) (*AcceptRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRequest not implemented")
}
func (UnimplementedMatchServiceServer) RejectRequest(context.Context, *RejectRequestRequest) (*RejectRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectRequest not implemented")
}
func (UnimplementedMatchServiceServer) CompleteMatch(context.Context, *CompleteMatchRequest) (*CompleteMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMatch not implemented")
}
func (UnimplementedMatchServiceServer) GetMatch(context.Context, *GetMatchRequest) (*GetMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatch not implemented")
}
func (UnimplementedMatchServiceServer) ListMatchesByRide(context.Context, *ListMatchesByRideRequest) (*ListMatchesByRideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMatchesByRide not implemented")
}
func (UnimplementedMatchServiceServer) ListMatchesByRider(context.Context, *ListMatchesByRiderRequest) (*ListMatchesByRiderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMatchesByRider not implemented")
}
func (UnimplementedMatchServiceServer) mustEmbedUnimplementedMatchServiceServer() {}
func (UnimplementedMatchServiceServer) testEmbeddedByValue()                      {}

// UnsafeMatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchServiceServer will
// result in compilation errors.
type UnsafeMatchServiceServer interface {
	mustEmbedUnimplementedMatchServiceServer()
}

func RegisterMatchServiceServer(s grpc.ServiceRegistrar, srv MatchServiceServer) {
	// If the following call pancis, it indicates UnimplementedMatchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MatchService_ServiceDesc, srv)
}

func _MatchService_RequestToJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestToJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).RequestToJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_RequestToJoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).RequestToJoin(ctx, req.(*RequestToJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_AcceptRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).AcceptRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_AcceptRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).AcceptRequest(ctx, req.(*AcceptRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_RejectRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).RejectRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_RejectRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).RejectRequest(ctx, req.(*RejectRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_CompleteMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).CompleteMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_CompleteMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).CompleteMatch(ctx, req.(*CompleteMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_GetMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).GetMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_GetMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).GetMatch(ctx, req.(*GetMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_ListMatchesByRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMatchesByRideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).ListMatchesByRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_ListMatchesByRide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).ListMatchesByRide(ctx, req.(*ListMatchesByRideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_ListMatchesByRider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMatchesByRiderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).ListMatchesByRider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_ListMatchesByRider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).ListMatchesByRider(ctx, req.(*ListMatchesByRiderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchService_ServiceDesc is the grpc.ServiceDesc for MatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.MatchService",
	HandlerType: (*MatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestToJoin",
			Handler:    _MatchService_RequestToJoin_Handler,
		},
		{
			MethodName: "AcceptRequest",
			Handler:    _MatchService_AcceptRequest_Handler,
		},
		{
			MethodName: "RejectRequest",
			Handler:    _MatchService_RejectRequest_Handler,
		},
		{
			MethodName: "CompleteMatch",
			Handler:    _MatchService_CompleteMatch_Handler,
		},
		{
			MethodName: "GetMatch",
			Handler:    _MatchService_GetMatch_Handler,
		},
		{
			MethodName: "ListMatchesByRide",
			Handler:    _MatchService_ListMatchesByRide_Handler,
		},
		{
			MethodName: "ListMatchesByRider",
			Handler:    _MatchService_ListMatchesByRider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/match.proto",
}
