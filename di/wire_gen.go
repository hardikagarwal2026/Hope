// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"hope/api"
	"hope/config"
	"hope/repository"
	"hope/service"
)

// Injectors from wire.go:

func InitApp() (*Handlers, error) {
	databaseConfig := config.GetDatabaseConfig()
	db, err := config.InitDatabase(databaseConfig)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(db)
	v := config.GetAllowedDomains()
	v2 := config.GetJWTSecret()
	string2 := config.ProvideGoogleClientID()
	authService := service.NewAuthService(userRepository, v, v2, string2)
	authHandler := api.NewAuthHandler(authService)
	chatMessageRepository := repository.NewChatMessageRepository(db)
	matchRepository := repository.NewMatchRepository(db)
	chatService := service.NewChatService(chatMessageRepository, matchRepository)
	chatHandler := api.NewChatHandler(chatService)
	userLocationRepository := repository.NewUserLocationRepository(db)
	locationService := service.NewLocationService(userLocationRepository)
	locationHandler := api.NewLocationHandler(locationService)
	rideOfferRepository := repository.NewrideOfferRepository(db)
	rideRequestRepository := repository.NewRideRequestRepository(db)
	matchService := service.NewMatchService(matchRepository, rideOfferRepository, rideRequestRepository)
	matchHandler := api.NewMatchHandler(matchService)
	reviewRepository := repository.NewReviewRepository(db)
	reviewService := service.NewReviewService(reviewRepository)
	reviewHandler := api.NewReviewHandler(reviewService)
	rideService := service.NewRideService(rideOfferRepository, rideRequestRepository, userRepository)
	rideHandler := api.NewRideHandler(rideService)
	userService := service.NewUserService(userRepository)
	userHandler := api.NewUserHandler(userService)
	handlers := &Handlers{
		AuthHandler:     authHandler,
		ChatHandler:     chatHandler,
		LocationHandler: locationHandler,
		MatchHandler:    matchHandler,
		ReviewHandler:   reviewHandler,
		RideHandler:     rideHandler,
		UserHandler:     userHandler,
	}
	return handlers, nil
}

// wire.go:

type Handlers struct {
	AuthHandler     *api.AuthHandler
	ChatHandler     *api.ChatHandler
	LocationHandler *api.LocationHandler
	MatchHandler    *api.MatchHandler
	ReviewHandler   *api.ReviewHandler
	RideHandler     *api.RideHandler
	UserHandler     *api.UserHandler
}

// Provider Set
var ProviderSetService = wire.NewSet(config.GetAllowedDomains, config.InitDatabase, config.GetJWTSecret, config.GetDatabaseConfig, config.ProvideGoogleClientID, repository.NewUserRepository, repository.NewRideRequestRepository, repository.NewrideOfferRepository, repository.NewUserLocationRepository, repository.NewMatchRepository, repository.NewChatMessageRepository, repository.NewReviewRepository, service.NewAuthService, service.NewUserService, service.NewRideService, service.NewMatchService, service.NewChatService, service.NewReviewService, service.NewLocationService, api.NewAuthHandler, api.NewChatHandler, api.NewLocationHandler, api.NewMatchHandler, api.NewReviewHandler, api.NewRideHandler, api.NewUserHandler, wire.Struct(new(Handlers), "*"))
